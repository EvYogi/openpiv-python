#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#------------------------------------------------------------------------------
""" An example of embedding a maplotlib plot inside an Enaml application.

<< autodoc-me >>
"""
import os
import numpy as np
from enaml.image import Image
from enaml.layout.api import vbox, hbox, spacer
from enaml.widgets.api import (
    Window, Container, MPLCanvas, CheckBox, ComboBox, Form, Label, Field, Slider,
    GroupBox, SpinBox, PushButton,
    )

from matplotlib.figure import Figure
from matplotlib.image import imread
from matplotlib.pyplot import imshow, quiver
from matplotlib.cm import gray


import sys
sys.path.append('/Users/alex/Documents/OpenPIV/openpiv-python')

import openpiv.tools
import openpiv.process
import openpiv.scaling
import numpy as np


def image_path(name):
    dirname = os.path.dirname(__file__)
    return os.path.join(dirname, 'images', name)
    
img1 = imread(image_path('exp1_001_a.bmp'))
img2 = imread(image_path('exp1_001_b.bmp'))

fig1 = Figure()
ax1 = fig1.add_subplot(111)
# ax1.plot([1, 2, 3])
ax1.imshow(img1,cmap=gray)

fig2 = Figure()
ax2 = fig2.add_subplot(111)
# ax2.plot([5, 2, 8, 1])
ax2.imshow(img2,cmap=gray)

fig3 = Figure()
ax3 = fig1.add_subplot(111)
a = np.loadtxt('exp1_001.txt')
invalid = a[:,4].astype('bool')
valid = ~invalid

xmax=np.amax(a[:,0]))
ymax=np.amax(a[:,1]))
ax3.imshow(img1, origin='lower', cmap="Greys_r",extent=[0.,xmax,0.,ymax])
ax3.hold(True)
ax3.quiver(a[invalid,0],a[invalid,1],a[invalid,2],a[invalid,3],color='r')
ax3.quiver(a[valid,0],a[valid,1],a[valid,2],a[valid,3],color='b')
# openpiv.tools.display_vector_field('exp1_001.txt', scale=100, width=0.0025)

figures = {
    'A': fig1,
    'B': fig2,
    'C': fig3,
}


enamldef Main(Window): main:
    attr model
    Container:
        constraints = [
            hbox(
            vbox(
                hbox(spacer, check, spacer),
                canvas,),
            grp_controls),
            cbox.v_center == check.v_center,
            contents_top == form.top,
        ]

        CheckBox: check:
            text = 'Toolbar Visible'
            checked := canvas.toolbar_visible
        MPLCanvas: canvas:
            figure << figures[cbox.selected_item]
        GroupBox: grp_controls:
            title = 'PIV settings'
            Form: form:
                Label:
                    text = 'Images'
                ComboBox: cbox:
                    items = ['A', 'B', 'C']
                    index = 0
            GroupBox: grp_int:
                title = 'Interrogation window'
                Form: 
                    Label:
                        text = 'Width'
                    ComboBox: cbox_width:
                        items = ['8','16','32','64','128','256']
                        index = 0
                    Label:
                        text = 'Height'
                    ComboBox: cbox_height:
                        items = ['8','16','32','64','128','256']
                        index = 0
            GroupBox: grp_ovlp:
                title = 'Overlap'
                Form:
                    Label:
                        text = 'Horizontal'
                    ComboBox: cbox_ovlp_x:
                        items = ['8','16','32','64','128','256']
                        index = 0
                    Label:
                        text = 'Vertical'
                    ComboBox: cbox_ovlp_y:
                        items = ['8','16','32','64','128','256']
                        index = 0                   
            Label:
                text = 'Scale'
            Field:
                text = '1'
            Label:
                text = 'Global filter'
            Field:
                text = '100'
#                 
#                 Container:
#                     padding = 0
#                     constraints = [
#                         hbox(lbl, sldr),
#                         lbl.v_center == sldr.v_center,
#                     ]
#                     Label: lbl:
#                         text << '%d' % sldr.value
#                         constraints = [width == 25]
#                     Slider: sldr:
#                         pass
            PushButton: start_button:
                # Note: checkable push buttons are only supported on Qt
                text = 'Start/Stop'
                checkable = True
                toggled :: 
                    print 'Running'
                    frame_a  = openpiv.tools.imread( 'images/exp1_001_a.bmp' )
                    frame_b  = openpiv.tools.imread( 'images/exp1_001_b.bmp' )

                    u, v, sig2noise = openpiv.process.extended_search_area_piv( frame_a.astype(np.int32), frame_b.astype(np.int32), window_size=24, overlap=12, dt=0.02, search_area_size=64, sig2noise_method='peak2peak' )

                    x, y = openpiv.process.get_coordinates( image_size=frame_a.shape, window_size=24, overlap=12 )

                    u, v, mask = openpiv.validation.sig2noise_val( u, v, sig2noise, threshold = 1.3 )

                    u, v = openpiv.filters.replace_outliers( u, v, method='localmean', max_iter=10, kernel_size=2)

                    x, y, u, v = openpiv.scaling.uniform(x, y, u, v, scaling_factor = 96.52 )

                    openpiv.tools.save(x, y, u, v, mask, 'exp1_001.txt' )
                    
                    print 'Done'
                    

                    # openpiv.tools.display_vector_field('exp1_001.txt', scale=100, width=0.0025)
                    
